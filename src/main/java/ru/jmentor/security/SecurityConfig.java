package ru.jmentor.security;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter {    private final PasswordEncoder passwordEncoder;    private final UserDetailsService userDetailsService;    @Autowired    public SecurityConfig(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {        this.userDetailsService = userDetailsService;        this.passwordEncoder = passwordEncoder;    }    @Bean    public AuthenticationSuccessHandlerImpl successHandler(){ return new AuthenticationSuccessHandlerImpl(); }    @Override    protected void configure(HttpSecurity httpSecurity) throws Exception {       httpSecurity               .authorizeRequests()                    .antMatchers("/admin/**").hasAuthority("ROLE_ADMIN")                    .antMatchers("/userHome").authenticated()                    .anyRequest().permitAll()                    .and()               .formLogin()               .permitAll()               .usernameParameter("userName")               .passwordParameter("userPassword")               .loginPage("/")               .successHandler(successHandler())               .and()               .logout().logoutUrl("/logout")               .logoutSuccessUrl("/").permitAll()               .and()               .exceptionHandling().accessDeniedPage("/error");        httpSecurity                .csrf()                .disable();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {               auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);    }}